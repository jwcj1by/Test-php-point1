<?php
//声明页面字符集
header("content-type:text/html;charset=utf-8");
require_once './public/Smarty-3.1.33/libs/Smarty.class.php';

//// 网站根目录
//define('ROOT_PATH', dirname(__FILE__));
////存放模板文件夹
//define('TPL_DIR', ROOT_PATH.'/templates/');
////编译文件夹
//define('TPL_C_DIR', ROOT_PATH.'/templates_c/');
////缓存文件夹
//define('CACHE_DIR', ROOT_PATH.'/cache/');
////定义缓存状态
//define('IS_CACHE',true);
////设置缓存状态开关
//IS_CACHE ? ob_start() : null;

// 定义数据库操作类(工具类)
class Db
{
    //私有的数据库配置信息
    private $db_host;    //主机名
    private $db_port;    //端口
    private $db_user;    //用户名
    private $db_pass;    //密码
    private $db_name;    //数据库名
    private $charset;    //字符集
    private $connection;
    private static $obj = NULL;

    //私有的连接MySQL服务器的方法
    private function connectDb()
    {
        try {
            $this->connection = mysqli_connect($this->db_host, $this->db_user, $this->db_pass, $this->db_name, $this->db_port);
        } catch (Exception $e) {
            die("PHP连接MySQL服务器出错！");
        }
    }

    //私有的设置字符集
    private function setCharset()
    {
        $this->exec("set names {$this->charset}");
    }

    public function exec($sql)
    {
        if (substr(strtolower($sql), 0, 6) === 'select') {
            die("该方法不能执行SELECT语名");
        }
        //如果是非SELECT语句，则正常执行，并返回布尔值
        return mysqli_query($this->connection, $sql);
    }

    public function fetchAll($sql, $type = 2)
    {
        $result = $this->query($sql);

        $types = [MYSQLI_NUM, MYSQLI_BOTH, MYSQLI_ASSOC];

        //循环从结果集中取出所有记录，并存入一个新数组中
        while ($row = mysqli_fetch_array($result, $types[$type])) {
            $arrs[] = $row;
        }

        //返回二维数组
        return $arrs;
    }


    //私有的执行SQL语句的方法：select
    private function query($sql)
    {
        //判断SQL语句是不是SELECT语句
        if (substr(strtolower($sql), 0, 6) != 'select') {
            die("该方法不能执行非SELECT语名");
        }
        //如果是SELECT语句，则正常执行，并返回结果集
        return mysqli_query($this->connection, $sql);
    }

    //公共的获取单行记录的方法(一维数组)
    public function fetchOne($sql, $type = 3)
    {
        //执行SQL语句，并返回结果集
        $result = $this->query($sql);

        //定义返回的数组的类型
        $types = ['MYSQL_NUM', 'MYSQL_BOTH', 'MYSQL_ASSOC'];

        //返回一条记录
        return mysqli_fetch_array($result, $types[$type]);
    }

    //公共的获取记录数的方法
    public function rowCount($sql)
    {
        //执行SQL语句，并返回结果集
        $result = $this->query($sql);
        //返回记录数
        return mysqli_num_rows($result);
    }

    public static function getInstance($config)
    {
        if (!self::$obj instanceof self) {
            self::$obj = new self($config);
        }

        return self::$obj;
    }

    //构造方法
    public function __construct($config)
    {
        $this->db_host = $config['db_host'];
        $this->db_port = $config['db_port'];
        $this->db_user = $config['db_user'];
        $this->db_pass = $config['db_pass'];
        $this->db_name = $config['db_name'];
        $this->charset = $config['charset'];
        $this->connectDb(); //连接MySQL服务器
        $this->setCharset(); //设置字符集
    }

    public function __clone()
    {
        // TODO: Implement __clone() method.
    }

    public function __call($method, $params)
    {
        return $this->connection->{$method}(...$params);
    }


}

//创建数据库类的对象
$arr = array(
    'db_host' => 'localhost',
    'db_port' => '3306',
    'db_user' => 'root',
    'db_pass' => 'root',
    'db_name' => 'php_admin',
    'charset' => 'utf8',
);

try {
    $db = Db::getInstance($arr);
    $sql = "SELECT * FROM user";
    $sql_val = $db->fetchAll($sql);
} catch (Exception $e) {
    echo $e->getMessage(), ' here';
    die;
}

$smarty = new Smarty();
$smarty->left_delimiter = '<{';
$smarty->right_delimiter = '}>';
$smarty->assign('sql_val', $sql_val);
$smarty->display('./application/views/home.php');


